namespace = lotr_maintenance

#Various maintenance events

		
lotr_maintenance.1 = { 
	
	type = country_event
  title = "lotr_maintenance.1.t"
  desc = "lotr_maintenance.1.desc"
  picture = event_orcs_orcs

	trigger = {
    country_culture_group  = orcs_group
    war = no
    any_unit = {
      has_variable = displaced_orcs
    }
	}
	
	immediate = {
	}
	
	option = {
		name = "OK"	
    set_variable = {
      name = num_orcs
      value = 0
    }
    every_unit = {
      limit = {
        has_variable = displaced_orcs
      }
      every_sub_unit = {
        ROOT = {
          change_variable = {
            name = num_orcs
            add = 1
          }
        }
      }
      destroy_unit = yes
    }
    while = {
      limit = { var:num_orcs > 3 }
      random_owned_province = {
        limit = {
          total_population < population_cap
        }
        define_pop = {
          type = slaves
          culture = root.culture
          religion = root.religion
        }
      }
      change_variable = {
        name = num_orcs
        subtract = 6
      }
    }
    ai_chance = {
      base = 100
    }
	}
  option = {
    name = "lotr_maintenance.1.b" 
    ai_chance = {
      base = 0
    }
  }
}


#pseudo diloyal vassals in civil wars
lotr_maintenance.2 = { 
  type = country_event
  hidden = yes
  trigger = {
    OR = {
      tag = GON
      tag = CAR
      tag = ARN
    }
    has_civil_war = yes
  }
  immediate = {
    every_current_war = {
      limit = { is_civil_war = yes }
      every_war_participant = {
        limit = {
          OR = {
            is_subject_type = satrapy
            is_subject_type = ranger_protectorate
          }
        }
        add_to_list = fighting_subjects
        PREV = {
          remove_from_war = PREV.PREV
        }
      }
    }
    every_in_list = {
      list = fighting_subjects
      overlord = { release_subject = PREV }
      ROOT = {
        if = { 
          limit = { THIS = c:GON }
          make_subject = {
            target = PREV
            type = satrapy
          }
        }
        else
        {
          make_subject = {
            target = PREV
            type = ranger_protectorate
          }
        }
      }
    }
  }
}

#accept cultures for AI (somehow they seem to fail to use the cultural decision)
lotr_maintenance.3 = { 
  type = country_event
  title = OK
  desc = OK
  hidden = yes
  trigger = {
    is_ai = yes
  }
  immediate = {
    every_country_culture = {
      limit = {
        is_integrated = no
        NOT = { culture = culture:urukhai }
        culture.culture_group = ROOT.culture_group
        country_culture_pop_count > ROOT.twenty_percent_integrated_pops
      }
      ROOT = { integrate_country_culture = PREV }
    }
  }
  option = {
    name = OK
  }
}

#mark provinces near orcs for raids.
lotr_maintenance.4 = { 
  type = country_event
  hidden = yes
  trigger = {
    is_ai = no
  }
  immediate = {
    every_region = {
      limit = {
        any_region_province = {
          has_owner = yes
          owner = {
            primary_culture = goblins
          }
        }
      }
      every_region_province = {
        limit = {
          OR = {
            has_owner = no
            owner = { religion = melkorism }
          }
        }
        set_variable = {
          name = hasGoblinsRaidsFlag
          days = 365
        }
      }
    }
    every_region = {
      limit = {
        any_region_province = {
          has_owner = yes
          owner = {
            primary_culture = orcish
          }
        }
      }
      every_region_province = {
        limit = {
          OR = {
            has_owner = no
            owner = { religion = melkorism }
          }
        }
        set_variable = {
          name = hasOrcRaidsFlag
          days = 365
        }
      }
    }
    every_region = {
      limit = {
        any_region_province = {
          has_owner = yes
          owner = {
            primary_culture = urukhai
          }
        }
      }
      every_region_province = {
        limit = {
          OR = {
            has_owner = no
            owner = { religion = melkorism }
          }
        }
        set_variable = {
          name = hasUrukRaidsFlag
          days = 365
        }
      }
    }
    every_country = {
      limit = {
        NOT = { religion = melkorism }
        is_ai = no
      }
      set_variable = {
        name = golbin_raid_province_num
        value = country_count_possibly_raided_provinces_goblins
      }
      set_variable = {
        name = orc_raid_province_num
        value = country_count_possibly_raided_provinces_orcs
      }
      set_variable = {
        name = uruk_raid_province_num
        value = country_count_possibly_raided_provinces_uruk
      }
    }
  }
}

#mark provinces near corsairs for raids.
lotr_maintenance.5 = { 
  type = country_event
  title = OK
  desc = OK
  hidden = yes
  trigger = {
    tag = UMB
  }
  immediate = {
    if = {
      limit = { NOT = { has_variable = rivers_marked_flag } }
      every_sea_and_river_zone = {
        limit = {
          is_sea = no
        }
        set_variable = {
          name = is_a_river
        }
      }
      set_variable = {
        name = rivers_marked_flag
      }
    }
    every_owned_province = {
      limit = {
        is_coastal = yes
      }
      every_neighbor_province = {
        limit = {
          OR = {
            is_sea = yes
            has_variable = is_a_river
          }
          NOT = {
            is_in_list = raidSeaZones
          }
        }
        add_to_list = raidSeaZones
      }
    }
    every_subject = {
      every_owned_province = {
        limit = {
          is_coastal = yes
        }
        every_neighbor_province = {
          limit = {
            OR = {
              is_sea = yes
              has_variable = is_a_river
            }
            NOT = {
              is_in_list = raidSeaZones
            }
          }
          add_to_list = raidSeaZones
        }
      }
    }
    if = {
      limit = {
        military_tech > 20
      }
      set_local_variable = {
        name = currentDistance
        value = 0
      }
    }
    else_if = {
      limit = {
        military_tech > 16
      }
      set_local_variable = {
        name = currentDistance
        value = 1
      }
    }
    else_if = {
      limit = {
        military_tech > 12
      }
      set_local_variable = {
        name = currentDistance
        value = 2
      }
    }
    else_if = {
      limit = {
        military_tech > 8
      }
      set_local_variable = {
        name = currentDistance
        value = 3
      }
    }
    else_if = {
      limit = {
        military_tech > 4
      }
      set_local_variable = {
        name = currentDistance
        value = 4
      }
    }
    else
    {
      set_local_variable = {
        name = currentDistance
        value = 5
      }
    }
    while = {
      count = 10 #maximum with high military tech. Probably not needed but let's make sure the game doesn't go infinite loop
      limit = {
        local_var:currentDistance < 10
      }
      change_local_variable = {
        name = currentDistance
        add = 1
      }
      every_in_list = {
        list = raidSeaZones
        limit = {
          NOT = { has_variable = corsairRaidDistance }
        }
        set_variable = {
          name = corsairRaidDistance
          value = local_var:currentDistance
          days = 364
        }
        every_neighbor_province = {
          limit = {
            NOR = {
              is_in_list = raidSeaZones
              has_variable = corsairRaidDistance
              this = p:5499 #impassable part of the sea
            }
            OR = {
              is_sea = yes
              has_variable = is_a_river
            }
          }
          add_to_list = raidSeaZones
        }
      }
    }
    every_country = {
      limit = {
        NOT = { religion = melkorism }
        any_owned_province = {
          OR = {
            can_build_building = port_building
            num_of_port_building >= 1
          }
        }
        any_owned_province = {
          any_neighbor_province = {
            has_variable = corsairRaidDistance
          }
          NOR = { 
            has_building = fortress_building
            has_variable = protected_against_corsairs
          }
        }
      }
      set_local_variable = {
        name = corsair_raid_strength_total
        value = 0
      }
      every_owned_province = {
        limit = {
          any_neighbor_province = {
            has_variable = corsairRaidDistance
          }
          NOR = { 
            has_building = fortress_building
            has_variable = protected_against_corsairs
          }
        }
        # set_local_variable = {
        #   name = corsair_distance
        #   value = 10
        # }
        ordered_neighbor_province = {
          limit = { has_variable = corsairRaidDistance }
          order_by = {
            value = 11
            subtract = var:corsairRaidDistance
          }
          position = 0
          set_local_variable = {
            name = corsair_distance
            value = var:corsairRaidDistance
          }
        }
        set_variable = {
          name = corsair_raid_strength
          value = 11
          # subtract = local_var:corsair_distance
          days = 365
        }
        change_variable = {
          name = corsair_raid_strength
          subtract = local_var:corsair_distance
        }
        change_local_variable = {
          name = corsair_raid_strength_total
          add = var:corsair_raid_strength
        }
      }
      set_variable = {
        name = corsair_raid_strength_total
        value = local_var:corsair_raid_strength_total
        days = 365
      }
      change_variable = {
        name = corsair_raid_strength_total
        divide = 2 #todo check examples if this is reasonable
      }
      set_variable = {
        name = corsair_raid_strength_half
        value = var:corsair_raid_strength_total
        days = 365
      }
      change_variable = {
        name = corsair_raid_strength_half
        divide = 2
      }
      set_variable = {
        name = corsair_raid_strength_quarter
        value = var:corsair_raid_strength_half
        days = 365
      }
      change_variable = {
        name = corsair_raid_strength_quarter
        divide = 2
      }
      # round_variable = {
      #   name = corsair_raid_strength_total
      # }
    }
    every_country = {
      limit = { 
        any_subject = {
          has_variable = corsair_raid_strength_total
          num_of_ships < var:corsair_raid_strength_total
        } 
      }
      if = {
        limit = { has_variable = corsair_raid_strength_total }
        set_local_variable = {
          name = corsair_raid_strength_with_subjects
          value = var:corsair_raid_strength_total
        }
      }
      else = {
        set_local_variable = {
          name = corsair_raid_strength_with_subjects
          value = 0
        }
      }
      every_subject = {
        limit = {
          has_variable = corsair_raid_strength_total
        }
        if = {
          limit = {
            num_of_ships < var:corsair_raid_strength_quarter
          }
          change_local_variable = {
            name = corsair_raid_strength_with_subjects
            add = var:corsair_raid_strength_total
          }
          set_variable = {
            name = corsair_raid_strength_subject
            value = var:corsair_raid_strength_total
            days = 365
          }
        }
        else_if = {
          limit = {
            num_of_ships < var:corsair_raid_strength_half
          }
          change_local_variable = {
            name = corsair_raid_strength_with_subjects
            add = var:corsair_raid_strength_half
          }
          set_variable = {
            name = corsair_raid_strength_subject
            value = var:corsair_raid_strength_half
            days = 365
          }
        }
        else_if = {
          limit = {
            num_of_ships < var:corsair_raid_strength_total
          }
          change_local_variable = {
            name = corsair_raid_strength_with_subjects
            add = var:corsair_raid_strength_quarter
          }
          set_variable = {
            name = corsair_raid_strength_subject
            value = var:corsair_raid_strength_quarter
            days = 365
          }
        }
      }
      set_variable = {
        name = corsair_raid_strength_with_subjects
        value = local_var:corsair_raid_strength_with_subjects
        days = 365
      }
      change_variable = {
        name = corsair_raid_strength_with_subjects
        divide = 2 #todo check examples if this is reasonable
      }
      set_variable = {
        name = corsair_raid_strength_with_subjects_half
        value = var:corsair_raid_strength_with_subjects
        days = 365
      }
      change_variable = {
        name = corsair_raid_strength_with_subjects_half
        divide = 2
      }
      set_variable = {
        name = corsair_raid_strength_with_subjects_quarter
        value = var:corsair_raid_strength_with_subjects_half
        days = 365
      }
      change_variable = {
        name = corsair_raid_strength_with_subjects_quarter
        divide = 2
      }
      # round_variable = {
      #   name = corsair_raid_strength_with_subjects
      # }
    }
  }

  option = {
    name = OK
  }
}


#Keeping track of number of melkorism citizen after Sauron falls. Randomly converting some
lotr_maintenance.6 = {
  type = country_event
  title = OK
  desc = OK
  hidden = yes
  trigger = {
    religion = melkorism
    has_country_modifier = sauron_is_defeated_melkor
  }
  immediate = {
    ###convert to ritualism
    #part 1: existing ritualism convert others
    set_local_variable = {
      name = convert_ritual_chance
      value = { integer_range = { min = -40 max = 40 } }
    }
    change_local_variable = {
      name = convert_ritual_chance
      multiply = var:ritual_pop_fraction
    }
    #part 2: new ritualism people without existing 
    set_local_variable = {
      name = convert_ritual_chance_base
      value = { integer_range = { min = -50 max = 15 } }
    }
    if = {
      limit = {
        local_var:convert_ritual_chance_base > 0
      }
      change_local_variable = {
        name = convert_ritual_chance
        add = local_var:convert_ritual_chance_base
      }
    }
    ###convert to eru (unlikely unless there are already many eru in the country)
    #part 1: existing eru convert others
    set_local_variable = {
      name = convert_eru_chance
      value = { integer_range = { min = -40 max = 40 } }
    }
    change_local_variable = {
      name = convert_eru_chance
      multiply = var:eru_pop_fraction
    }
    #part 2: unlikely new eru people
    set_local_variable = {
      name = convert_eru_chance_base
      value = { integer_range = { min = -50 max = 5 } }
    }
    if = {
      limit = {
        local_var:convert_eru_chance_base > 0
      }
      change_local_variable = {
        name = convert_eru_chance
        add = local_var:convert_eru_chance_base
      }
    }

    #doing the actual conversions
    every_owned_province = {
      set_local_variable = {
        name = ritual_converts
        value = total_population
      }
      change_local_variable = {
        name = ritual_converts
        multiply = local_var:convert_ritual_chance
      }
      change_local_variable = {
        name = ritual_converts
        divide = 100
      }
      if = { #fake rounding (the real rounding doesn't seem to work). Small provinces would get way too little to we round for below 1 conversion with a bias
        limit = { 
          local_var:ritual_converts < 1 
          local_var:ritual_converts >= 0.4 
        }
        set_local_variable = {
          name = ritual_converts
          value = 1
        }
      }
      if = {
        limit = { local_var:ritual_converts >= 1 }
        while = {
          count = local_var:ritual_converts
          limit = {
            any_pops_in_province = {
              pop_religion = melkorism
            }
          }
          random_pops_in_province = {
            limit = {
              pop_religion = melkorism
            }
            set_pop_religion = eastern_animism
          }
        }
      }
      set_local_variable = {
        name = eru_converts
        value = total_population
      }
      change_local_variable = {
        name = eru_converts
        multiply = local_var:convert_eru_chance
      }
      change_local_variable = {
        name = eru_converts
        divide = 100
      }
      if = {
        limit = { 
          local_var:eru_converts < 1 
          local_var:eru_converts >= 0.4
        }
        set_local_variable = {
          name = eru_converts
          value = 1
        }
      }
      if = {
        limit = { local_var:eru_converts >= 1 }
        while = {
          count = local_var:eru_converts
          limit = {
            any_pops_in_province = {
              pop_religion = melkorism
            }
          }
          random_pops_in_province = {
            limit = {
              pop_religion = melkorism
            }
            set_pop_religion = iluvatarism
          }
        }
      }
    }
    count_religions = yes
  }
}

lotr_maintenance.7 = {
  type = country_event
  title = OK
  desc = OK
  hidden = yes
  trigger = {
  }
  immediate = {
    if = {
      limit = {
        any_owned_province = {
          is_in_area = khazad_dum_area
        }
      }
      random_owned_province = {
        limit = { 
          is_in_area = khazad_dum_area
        }
        save_scope_as = p
      }
      if = {
        limit = {
          scope:p.state = { has_state_modifier = moria_state_modifier }
        }
        if = {
          limit = {
            OR = {
              NOT = { owns = 3695 }
              NOT = { owns = 2999 }
            }
          }
          scope:p.state = { remove_state_modifier = moria_state_modifier }
        }
      }
      else_if = {
        limit = {
          NOT = { scope:p.state = { has_state_modifier = moria_state_modifier } }
        }
        if = {
          limit = {
            owns = 3695
            owns = 2999
          }
          scope:p.state = { 
            add_state_modifier = {
              name = moria_state_modifier
              duration = -1
            }
          }
        }
      }
    }
    if = {
      limit = {
        any_owned_province = {
          is_in_area = anorien_area
        }
      }
      random_owned_province = {
        limit = { 
          is_in_area = anorien_area
        }
        save_scope_as = p
      }
      if = {
        limit = {
          scope:p.state = { has_state_modifier = minas_anor_state_modifier }
        }
        if = {
          limit = {
            OR = {
              NOT = { owns = 1300 } #minas tirith
              NOT = { owns = 1302 } #west osgiliath (same area)
            }
          }
          scope:p.state = { remove_state_modifier = minas_anor_state_modifier }
        }
      }
      else_if = {
        limit = {
          NOT = { scope:p.state = { has_state_modifier = minas_anor_state_modifier } }
        }
        if = {
          limit = {
            owns = 1300
            owns = 1302
          }
          scope:p.state = { 
            add_state_modifier = {
              name = minas_anor_state_modifier
              duration = -1
            }
          }
        }
      }
    }
    if = {
      limit = {
        owns = 1141 #barad dur
        p:1141.state = {
          NOT = { has_state_modifier = barad_dur_state_modifier }
        }
      }
      p:1141.state = {
        add_state_modifier = {
          name = barad_dur_state_modifier
          duration = -1
        }
      }
      every_country = {
        limit = {
          any_province = {
            is_in_area = barad_dur_area
          }
        }
        random_province = {
          limit = { is_in_area = barad_dur_area }
          state = { remove_state_modifier = barad_dur_state_modifier }
        }
      }
    }
    if = {
      limit = {
        owns = 1021 #black gate
        p:1021.state = {
          NOT = { has_state_modifier = black_gate_state_modifier }
        }
      }
      p:1021.state = {
        add_state_modifier = {
          name = black_gate_state_modifier
          duration = -1
        }
      }
      every_country = {
        limit = {
          any_province = {
            is_in_area = udun_area
          }
        }
        random_province = {
          limit = { is_in_area = udun_area }
          state = { remove_state_modifier = black_gate_state_modifier }
        }
      }
    }
    if = {
      limit = {
        owns = 1546 #orthanc
        p:1546.state = {
          NOT = { has_state_modifier = orthanc_state_modifier }
        }
      }
      p:1546.state = {
        add_state_modifier = {
          name = orthanc_state_modifier
          duration = -1
        }
      }
      every_country = {
        limit = {
          any_province = {
            is_in_area = calenhardin_area
          }
        }
        random_province = {
          limit = { is_in_area = calenhardin_area }
          state = { remove_state_modifier = orthanc_state_modifier }
        }
      }
    }
    if = {
      limit = {
        owns = 1105 #dol guldur
        p:1105.state = {
          NOT = { has_state_modifier = dol_guldur_state_modifier }
        }
      }
      p:1105.state = {
        add_state_modifier = {
          name = dol_guldur_state_modifier
          duration = -1
        }
      }
      every_country = {
        limit = {
          any_province = {
            is_in_area = emyn_guldur_area
          }
        }
        random_province = {
          limit = { is_in_area = emyn_guldur_area }
          state = { remove_state_modifier = dol_guldur_state_modifier }
        }
      }
    }
    if = {
      limit = {
        owns = 1 #Umbar
        p:1.state = {
          NOT = { has_state_modifier = umbar_state_modifier }
        }
      }
      p:1.state = {
        add_state_modifier = {
          name = umbar_state_modifier
          duration = -1
        }
      }
      every_country = {
        limit = {
          any_province = {
            is_in_area = umbar_area
          }
        }
        random_province = {
          limit = { is_in_area = umbar_area }
          state = { remove_state_modifier = umbar_state_modifier }
        }
      }
    }
    if = {
      limit = {
        owns = 1030 #Minas Morgul
        p:1030.state = {
          NOT = { has_state_modifier = minas_ithil_state_modifier }
        }
      }
      p:1030.state = {
        add_state_modifier = {
          name = minas_ithil_state_modifier
          duration = -1
        }
      }
      every_country = {
        limit = {
          any_province = {
            is_in_area = ephel_duath_area
          }
        }
        random_province = {
          limit = { is_in_area = ephel_duath_area }
          state = { remove_state_modifier = minas_ithil_state_modifier }
        }
      }
    }
  }
}