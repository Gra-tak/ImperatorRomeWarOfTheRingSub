country_decisions = {
	lotr_treasure_one_ring_decision = {
		potential = {
			is_ai = no
			exists = treasure:lotr_treasure_one_ring
			NOT = { has_variable = lotr_one_ring_events3_variable }
			ROOT = {
				any_country_treasure = {
					this = treasure:lotr_treasure_one_ring
				}
			}
		}
		allow = {
			ROOT = {
				any_country_treasure = {
					this = treasure:lotr_treasure_one_ring
				}
			}
		}
		effect = {
			custom_tooltip = "lotr_treasure_one_ring_decision_tooltip"	
			hidden_effect = {
				current_ruler = {
					add_health = -15
				}
			}
			add_stability = -10
			trigger_event = lotr_one_ring_events.3
		}
		
		ai_will_do = {
			factor = 0
		}
	}
	lotr_take_over_nazgul_decision = {
		potential = {
			is_ai = no
			exists = treasure:lotr_treasure_one_ring
			ROOT = {
				any_country_treasure = {
					this = treasure:lotr_treasure_one_ring
				}
			}
			religion = melkorism
			current_ruler = {
				OR = { #limited nunmber of people who can even potentially "take over" for sauron
					has_trait = nazgul
					has_trait = maia
					has_trait = narya
					has_trait = vilya
					has_trait = nenya
				}
			}
			NOT = {
				has_global_variable = lotr_nazgul_taken_over_flag
			}
		}
		allow = {
			OR = {
				AND = {
					owns = 1030
					c:MMO = { 
						OR = {
							has_land = no
							THIS = ROOT
						}
					}
				}
				c:MMO = { 
					owns = 1030
					is_subject = yes
					is_subject_of = ROOT
				}
			}
		}
		effect = {
			save_scope_as = actor
			every_living_character = {
				limit = { 
					has_trait = nazgul 
					NOT = {
						employer = ROOT
					}
				}
				if = {
					limit = {
						is_governor = yes
					}
					save_scope_as = naz
					employer = {
						save_scope_as = emp
						random_governorships = {
							limit = {
								governor = scope:naz
							}
							every_governorship_state = {
								every_state_province = {
									add_to_list = provs
								}
							}
						}
					}
				}
				defect_effect = yes
				set_family = ROOT.current_ruler.family
				hidden_effect = { #give back the provicnes the nazgul took with him...
					every_in_list = {
						list = provs
						set_conquered_by = scope:emp
						remove_from_list = provs
					}
				}
			}
			lotr_nazgul_ring_boost = yes
			set_global_variable = {
				name = lotr_nazgul_taken_over_flag
			}
			if = {
				limit = {
					c:MMO = { has_land = yes }
				}
				c:MMO = {
					every_owned_province = { set_conquered_by = ROOT }
				}
			}
		}
		
		ai_will_do = {
			factor = 0
		}
	}
	
}