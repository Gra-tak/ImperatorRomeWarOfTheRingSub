namespace = lotr_migration_events

# Fleeing from the orcs
lotr_migration_events.1 = {
	type = country_event
	title = "OK"
	desc = "OK"
	picture = event_gondor
	hidden = yes

	trigger = {
		has_law = age_of_the_orc
	}

	immediate = {
		set_variable = {
			name = trying_to_flee_num
			value = 0
		}
		every_owned_province = {
			set_variable = {
				name = all
				value = 0
			}
			set_variable = {
				name = refugee
				value = 0
			}
			every_pops_in_province = {
				PREV = {
					change_variable = {
						name = all
						add = 1
					}
				}
				if = {
					limit = { 
						NOR = { 
							this.culture.culture_group = root.culture.culture_group
							country_culture = {
								is_integrated = yes
							}
						} 
					}
					PREV = {
						change_variable = {
							name = refugee
							add = 1
						}
					}
				}
			}
			if = {
				limit = { var:all > 0 }
				set_variable = {
					name = refugeePerc
					value = var:refugee
				}
				change_variable = {
					name = refugeePerc
					divide = var:all
				}
				if = {
					limit = { var:refugeePerc > 0.2 } #if there's less than 20% non orcs, we assume that orcs won't allow anyone to flee
					every_pops_in_province = {
						limit = {
							NOR = { 
								this.culture.culture_group = root.culture.culture_group
								country_culture = {
									is_integrated = yes
								}
							}
						}
						add_to_list = trying_to_flee_list
					}
					ROOT = {
						change_variable = {
							name = trying_to_flee_num
							add = prev.var:refugee
						}
				}
				}
			}
		}


		set_variable = {
			name = fleeSuccess
			value = { integer_range = { min = 0 max = 5 } }
		}
		change_variable = {
			name = fleeSuccess
			multiply = var:trying_to_flee_num
		}
		change_variable = {
			name = fleeSuccess
			divide = 100
		}
	}
	option = {
		name = "OK"
		while = {
			count = var:fleeSuccess
			random_in_list = {
				list = trying_to_flee_list
				remove_from_list = trying_to_move_list
				save_scope_as = pop
				if = {
					limit = {
						any_country = {
							culture = PREV.culture
							any_owned_province = { total_population < population_cap }
						}
					}
					random_country = {
						limit = {
							culture = PREV.culture
							any_owned_province = { total_population < population_cap }
						}
						weight = {
							base = 10
							country_has_space_for_migration_modifer = yes
							modifier = {
								factor = 5
								religion = PREV.religion
							}
							modifier = {
								factor = 0.2
								religion = melkorism
							}
						}
						random_owned_province = {
							limit = { total_population < population_cap }
							weight = {
								province_has_space_for_migration_modifer = yes
								province_is_safe_modifier = yes
							}
							save_scope_as = target
						}
					}
					move_pop = scope:target
				}
				else_if = {
					limit = {
						any_country = {
							any_owned_province = { total_population < population_cap }
							OR = {
								any_integrated_culture = {
									this.culture = scope:pop.culture
								}
								culture.culture_group = PREV.culture.culture_group
							}
						}
					}
					random_country = {
						limit = {
							any_owned_province = { total_population < population_cap }
							OR = {
								any_integrated_culture = {
									this.culture = scope:pop.culture
								}
								culture.culture_group = PREV.culture.culture_group
							}
						}
						weight = {
							base = 10
							country_has_space_for_migration_modifer = yes
							modifier = {
								factor = 5
								religion = PREV.religion
							}
							modifier = {
								factor = 5
								AND = {
									any_integrated_culture = {
										this.culture = scope:pop.culture
									}
									culture.culture_group = PREV.culture.culture_group
								}
							}
							modifier = {
								factor = 0.2
								religion = melkorism
							}
						}
						random_owned_province = {
							limit = { total_population < population_cap }
							weight = {
								province_has_space_for_migration_modifer = yes
								province_is_safe_modifier = yes
							}
							save_scope_as = target
						}
					}
					move_pop = scope:target
				}
			}
		}
	}
}

# Dwarfs going home
lotr_migration_events.2 = {
	type = country_event
	title = "OK"
	desc = "OK"
	picture = event_gondor
	hidden = yes

	trigger = {
		NOR = { 
			has_law = age_of_the_orc
			country_culture_group = dwarf_group
		}
	}

	immediate = {
		set_variable = {
			name = trying_to_move_num
			value = 0
		}
		every_owned_province = {
			set_variable = {
				name = all
				value = 0
			}
			set_variable = {
				name = mover
				value = 0
			}
			every_pops_in_province = {
				PREV = {
					change_variable = {
						name = all
						add = 1
					}
				}
				if = {
					limit = { pop_culture_group = dwarf_group }
					PREV = {
						change_variable = {
							name = mover
							add = 1
						}
					}
				}
			}
			if = {
				limit = { var:all > 0 }
				set_variable = {
					name = moverPerc
					value = var:mover
				}
				change_variable = {
					name = moverPerc
					divide = var:all
				}
				if = {
					limit = { var:moverPerc < 0.75 } #leave enclaves intact
					every_pops_in_province = {
						limit = {
							pop_culture_group = dwarf_group
						}
						add_to_list = trying_to_move_list
					}
					ROOT = {
						change_variable = {
							name = trying_to_move_num
							add = prev.var:mover
						}
				}
				}
			}
		}


		set_variable = {
			name = actualMover
			value = { integer_range = { min = 0 max = 20 } }
		}
		change_variable = {
			name = actualMover
			multiply = var:trying_to_move_num
		}
		change_variable = {
			name = actualMover
			divide = 100
		}
	}
	option = {
		name = "OK"
		while = {
			count = var:actualMover
			random_in_list = {
				list = trying_to_move_list
				remove_from_list = trying_to_move_list
				if = {
					limit = {
						any_country = {
							any_owned_province = { total_population < population_cap }
							culture = PREV.culture
						}
					}
					random_country = {
						limit = {
							any_owned_province = { total_population < population_cap }
							culture = PREV.culture
						}
						weight = {
							base = 10
							country_has_space_for_migration_modifer = yes
							modifier = {
								factor = 5
								religion = PREV.religion
							}
						}
						random_owned_province = {
							limit = { total_population < population_cap }
							weight = {
								province_has_space_for_migration_modifer = yes
							}
							save_scope_as = target
						}
					}
					move_pop = scope:target
				}
				else_if = {
					limit = {
						any_country = {
							any_owned_province = { total_population < population_cap }
							culture.culture_group = PREV.culture.culture_group
						}
					}
					random_country = {
						limit = {
							any_owned_province = { total_population < population_cap }
							culture.culture_group = PREV.culture.culture_group
						}
						weight = {
							base = 10
							country_has_space_for_migration_modifer = yes
							modifier = {
								factor = 5
								religion = PREV.religion
							}
						}
						random_owned_province = {
							limit = { total_population < population_cap }
							weight = {
								province_has_space_for_migration_modifer = yes
							}
							save_scope_as = target
						}
					}
					move_pop = scope:target
				}
			}
		}
	}
}

# Teleri going home. Excepting Avari as they are way too far away...
lotr_migration_events.3 = {
	type = country_event
	title = "OK"
	desc = "OK"
	picture = event_gondor
	hidden = yes

	trigger = {
		NOR = { 
			has_law = age_of_the_orc
			country_culture_group = teleri_group
		}
	}

	immediate = {
		set_variable = {
			name = trying_to_move_num
			value = 0
		}
		every_owned_province = {
			set_variable = {
				name = all
				value = 0
			}
			set_variable = {
				name = mover
				value = 0
			}
			every_pops_in_province = {
				PREV = {
					change_variable = {
						name = all
						add = 1
					}
				}
				if = {
					limit = { 
						pop_culture_group = teleri_group 
						NOT = { pop_culture = nandor }
					}
					PREV = {
						change_variable = {
							name = mover
							add = 1
						}
					}
				}
			}
			if = {
				limit = { var:all > 0 }
				set_variable = {
					name = moverPerc
					value = var:mover
				}
				change_variable = {
					name = moverPerc
					divide = var:all
				}
				if = {
					limit = { var:moverPerc < 0.75 } #leave enclaves intact
					every_pops_in_province = {
						limit = {
							pop_culture_group = teleri_group
							NOT = { pop_culture = nandor }
						}
						add_to_list = trying_to_move_list
					}
					ROOT = {
						change_variable = {
							name = trying_to_move_num
							add = prev.var:mover
						}
				}
				}
			}
		}


		set_variable = {
			name = actualMover
			value = { integer_range = { min = 0 max = 20 } }
		}
		change_variable = {
			name = actualMover
			multiply = var:trying_to_move_num
		}
		change_variable = {
			name = actualMover
			divide = 100
		}
	}
	option = {
		name = "OK"
		while = {
			count = var:actualMover
			random_in_list = {
				list = trying_to_move_list
				remove_from_list = trying_to_move_list
				if = {
					limit = {
						any_country = {
							any_owned_province = { total_population < population_cap }
							culture = PREV.culture
						}
					}
					random_country = {
						limit = {
							any_owned_province = { total_population < population_cap }
							culture = PREV.culture
						}
						weight = {
							base = 10
							country_has_space_for_migration_modifer = yes
							modifier = {
								factor = 5
								religion = PREV.religion
							}
						}
						random_owned_province = {
							limit = { total_population < population_cap }
							weight = {
								province_has_space_for_migration_modifer = yes
							}
							save_scope_as = target
						}
					}
					move_pop = scope:target
				}
				else_if = {
					limit = {
						any_country = {
							any_owned_province = { total_population < population_cap }
							culture.culture_group = PREV.culture.culture_group
							NOT = { primary_culture = nandor }
						}
					}
					random_country = {
						limit = {
							any_owned_province = { total_population < population_cap }
							culture.culture_group = PREV.culture.culture_group
							NOT = { primary_culture = nandor }
						}
						weight = {
							base = 10
							country_has_space_for_migration_modifer = yes
							modifier = {
								factor = 5
								religion = PREV.religion
							}
						}
						random_owned_province = {
							limit = { total_population < population_cap }
							weight = {
								province_has_space_for_migration_modifer = yes
							}
							save_scope_as = target
						}
					}
					move_pop = scope:target
				}
			}
		}
	}
}

# Noldors going home
lotr_migration_events.4 = {
	type = country_event
	title = "OK"
	desc = "OK"
	picture = event_gondor
	hidden = yes

	trigger = {
		NOR = { 
			has_law = age_of_the_orc
			country_culture_group = noldor_group
		}
	}

	immediate = {
		set_variable = {
			name = trying_to_move_num
			value = 0
		}
		every_owned_province = {
			set_variable = {
				name = all
				value = 0
			}
			set_variable = {
				name = mover
				value = 0
			}
			every_pops_in_province = {
				PREV = {
					change_variable = {
						name = all
						add = 1
					}
				}
				if = {
					limit = { pop_culture_group = noldor_group }
					PREV = {
						change_variable = {
							name = mover
							add = 1
						}
					}
				}
			}
			if = {
				limit = { var:all > 0 }
				set_variable = {
					name = moverPerc
					value = var:mover
				}
				change_variable = {
					name = moverPerc
					divide = var:all
				}
				if = {
					limit = { var:moverPerc < 0.75 } #leave enclaves intact
					every_pops_in_province = {
						limit = {
							pop_culture_group = noldor_group
						}
						add_to_list = trying_to_move_list
					}
					ROOT = {
						change_variable = {
							name = trying_to_move_num
							add = prev.var:mover
						}
				}
				}
			}
		}


		set_variable = {
			name = actualMover
			value = { integer_range = { min = 0 max = 20 } }
		}
		change_variable = {
			name = actualMover
			multiply = var:trying_to_move_num
		}
		change_variable = {
			name = actualMover
			divide = 100
		}
	}
	option = {
		name = "OK"
		while = {
			count = var:actualMover
			random_in_list = {
				list = trying_to_move_list
				remove_from_list = trying_to_move_list
				if = {
					limit = {
						any_country = {
							any_owned_province = { total_population < population_cap }
							culture = PREV.culture
						}
					}
					random_country = {
						limit = {
							any_owned_province = { total_population < population_cap }
							culture = PREV.culture
						}
						weight = {
							base = 10
							country_has_space_for_migration_modifer = yes
							modifier = {
								factor = 5
								religion = PREV.religion
							}
						}
						random_owned_province = {
							limit = { total_population < population_cap }
							weight = {
								province_has_space_for_migration_modifer = yes
							}
							save_scope_as = target
						}
					}
					move_pop = scope:target
				}
				else_if = {
					limit = {
						any_country = {
							any_owned_province = { total_population < population_cap }
							culture.culture_group = PREV.culture.culture_group
						}
					}
					random_country = {
						limit = {
							any_owned_province = { total_population < population_cap }
							culture.culture_group = PREV.culture.culture_group
						}
						weight = {
							base = 10
							country_has_space_for_migration_modifer = yes
							modifier = {
								factor = 5
								religion = PREV.religion
							}
						}
						random_owned_province = {
							limit = { total_population < population_cap }
							weight = {
								province_has_space_for_migration_modifer = yes
							}
							save_scope_as = target
						}
					}
					move_pop = scope:target
				}
			}
		}
	}
}


# Orcs going home
lotr_migration_events.5 = {
	type = country_event
	title = "OK"
	desc = "OK"
	picture = event_gondor
	hidden = yes

	trigger = {
		NOT = { 
			country_culture_group = orcs_group
		}
	}

	immediate = {
	}
	option = {
		name = "OK"
		every_owned_province = {
			every_pops_in_province = {
				limit = {
					pop_culture_group = orcs_group
				}
				if = {
					limit = {
						any_country = {
							any_owned_province = { total_population < population_cap }
							culture = PREV.culture
						}
					}
					random_country = {
						limit = {
							any_owned_province = { total_population < population_cap }
							culture = PREV.culture
						}
						weight = {
							base = 10
							country_has_space_for_migration_modifer = yes
							modifier = {
								factor = 5
								religion = melkorism
							}
						}
						random_owned_province = {
							limit = { total_population < population_cap }
							weight = {
								province_has_space_for_migration_modifer = yes
							}
							save_scope_as = target
						}
					}
					move_pop = scope:target
				}
				else_if = {
					limit = {
						any_country = {
							any_owned_province = { total_population < population_cap }
							culture.culture_group = PREV.culture.culture_group
						}
					}
					random_country = {
						limit = {
							any_owned_province = { total_population < population_cap }
							culture.culture_group = PREV.culture.culture_group
						}
						weight = {
							base = 10
							country_has_space_for_migration_modifer = yes
							modifier = {
								factor = 5
								religion = melkorism
							}
						}
						random_owned_province = {
							limit = { total_population < population_cap }
							weight = {
								province_has_space_for_migration_modifer = yes
							}
							save_scope_as = target
						}
					}
					move_pop = scope:target
				}
			}
		}
	}
}


# Others going home (very rarely)
lotr_migration_events.6 = {
	type = country_event
	title = "OK"
	desc = "OK"
	picture = event_gondor
	hidden = yes

	trigger = {
		NOT = { 
			has_law = age_of_the_orc
		}
	}

	immediate = {
		set_variable = {
			name = trying_to_move_num
			value = 0
		}
		every_owned_province = {
			set_variable = {
				name = all
				value = 0
			}
			set_variable = {
				name = mover
				value = 0
			}
			every_pops_in_province = {
				PREV = {
					change_variable = {
						name = all
						add = 1
					}
				}
				if = {
					limit = { 
						NOR = { 
							this.culture.culture_group = root.culture.culture_group 
							pop_culture_group = orcs_group
							pop_culture_group = teleri_group
							pop_culture_group = noldor_group
							pop_culture_group = dwarf_group
						} 
					}
					PREV = {
						change_variable = {
							name = mover
							add = 1
						}
					}
				}
			}
			if = {
				limit = { var:all > 0 }
				set_variable = {
					name = moverPerc
					value = var:mover
				}
				change_variable = {
					name = moverPerc
					divide = var:all
				}
				if = {
					limit = { var:moverPerc < 0.75 } #leave enclaves intact
					every_pops_in_province = {
						limit = {
							NOR = { 
								this.culture.culture_group = root.culture.culture_group 
								pop_culture_group = orcs_group
								pop_culture_group = teleri_group
								pop_culture_group = noldor_group
								pop_culture_group = dwarf_group
							} 
						}
						add_to_list = trying_to_move_list
					}
					ROOT = {
						change_variable = {
							name = trying_to_move_num
							add = prev.var:mover
						}
				}
				}
			}
		}

		#just setting a low percentate would mean that we never have migration from small countries. Using the multiple of three percentages, we get a non-uniform random number that gives a maximum migraton of 6.4%, though this happens very rarely. In averege we have 0.8% migration.
		set_variable = {
			name = actualMover
			value = { integer_range = { min = 0 max = 40 } }
		}
		change_variable = {
			name = actualMover
			multiply = { integer_range = { min = 0 max = 40 } }
		}
		change_variable = {
			name = actualMover
			multiply = { integer_range = { min = 0 max = 40 } }
		}
		change_variable = {
			name = actualMover
			multiply = var:trying_to_move_num
		}
		change_variable = {
			name = actualMover
			divide = 1000000
		}
	}
	option = {
		name = "OK"
		while = {
			count = var:actualMover
			random_in_list = {
				list = trying_to_move_list
				remove_from_list = trying_to_move_list
				if = {
					limit = {
						any_country = {
							any_owned_province = { total_population < population_cap }
							culture = PREV.culture
						}
					}
					random_country = {
						limit = {
							any_owned_province = { total_population < population_cap }
							culture = PREV.culture
						}
						weight = {
							base = 10
							country_has_space_for_migration_modifer = yes
							modifier = {
								factor = 5
								religion = PREV.religion
							}
						}
						random_owned_province = {
							limit = { total_population < population_cap }
							weight = {
								province_has_space_for_migration_modifer = yes
							}
							save_scope_as = target
						}
					}
					move_pop = scope:target
				}
				else_if = {
					limit = {
						any_country = {
							any_owned_province = { total_population < population_cap }
							culture.culture_group = PREV.culture.culture_group
						}
					}
					random_country = {
						limit = {
							any_owned_province = { total_population < population_cap }
							culture.culture_group = PREV.culture.culture_group
						}
						weight = {
							base = 10
							country_has_space_for_migration_modifer = yes
							modifier = {
								factor = 5
								religion = PREV.religion
							}
						}
						random_owned_province = {
							limit = { total_population < population_cap }
							weight = {
								province_has_space_for_migration_modifer = yes
							}
							save_scope_as = target
						}
					}
					move_pop = scope:target
				}
			}
		}
	}
}

# Encourage movement to vassals
lotr_migration_events.7 = {
	type = country_event
	title = "OK"
	desc = "OK"
	picture = event_gondor
	hidden = yes

	trigger = {
		is_ai = no
		any_country_culture = {
			has_country_culture_modifier = encourage_migration
		}
	}

	immediate = {
		set_variable = {
			name = trying_to_move_num
			value = 0
		}
		every_owned_province = {
			set_variable = {
				name = all
				value = 0
			}
			set_variable = {
				name = mover
				value = 0
			}
			every_pops_in_province = {
				PREV = {
					change_variable = {
						name = all
						add = 1
					}
				}
				if = {
					limit = {
						country_culture = {
							has_country_culture_modifier = encourage_migration
						} 
					}
					PREV = {
						change_variable = {
							name = mover
							add = 1
						}
					}
				}
			}
			if = {
				limit = { var:all > 0 }
				set_variable = {
					name = moverPerc
					value = var:mover
				}
				change_variable = {
					name = moverPerc
					divide = var:all
				}
				if = {
					limit = { var:moverPerc < 0.9 } #leave enclaves intact
					every_pops_in_province = {
						limit = {
							country_culture = {
								has_country_culture_modifier = encourage_migration
							} 
						}
						add_to_list = trying_to_move_list
					}
					ROOT = {
						change_variable = {
							name = trying_to_move_num
							add = prev.var:mover
						}
				}
				}
			}
		}


		set_variable = {
			name = actualMover
			value = { integer_range = { min = 0 max = 20 } }
		}
		change_variable = {
			name = actualMover
			multiply = var:trying_to_move_num
		}
		change_variable = {
			name = actualMover
			divide = 100
		}
	}
	option = {
		name = "OK"
		while = {
			count = var:actualMover
			limit = { treasury >= 100 }
			random_in_list = {
				list = trying_to_move_list
				remove_from_list = trying_to_move_list
				save_scope_as = pop_from_list
				if = {
					limit = {
						ROOT = {
							any_subject = {
								culture = scope:pop_from_list.culture
								has_variable = relative_free_space
								var:relative_free_space > 0
							}
						}
					}
					ROOT = {
						random_subject = {
							limit = {
								culture = scope:pop_from_list.culture
								has_variable = relative_free_space
								var:relative_free_space > 0
							}
							weight = {
								base = 10
								country_has_space_for_migration_modifer = yes
								modifier = {
									factor = 5
									religion = scope:pop_from_list.religion
								}
							}
							random_owned_province = {
								limit = { total_population < population_cap }
								weight = {
									province_has_space_for_migration_modifer = yes
								}
								save_scope_as = target
							}
						}
					}
					if = {
						limit = { exists = scope:target }
						ROOT = { add_treasury = -5 }
						move_pop = scope:target
						clear_saved_scope = target
					}
				}
				else_if = {
					limit = {
						ROOT = {
							any_subject = {
								culture.culture_group = scope:pop_from_list.culture.culture_group
								has_variable = relative_free_space
								var:relative_free_space > 0
							}
						}
					}
					ROOT = {
						random_subject = {
							limit = {
								culture.culture_group = scope:pop_from_list.culture.culture_group
								has_variable = relative_free_space
								var:relative_free_space > 0
							}
							weight = {
								base = 10
								country_has_space_for_migration_modifer = yes
								modifier = {
									factor = 5
									religion = scope:pop_from_list.religion
								}
							}
							random_owned_province = {
								limit = { total_population < population_cap }
								weight = {
									province_has_space_for_migration_modifer = yes
								}
								save_scope_as = target
							}
						}
					}
					if = {
						limit = { exists = scope:target }
						ROOT = { add_treasury = -5 }
						move_pop = scope:target
						clear_saved_scope = target
					}
				}
			}
		}
	}
}

# Encourage movement from vassals
lotr_migration_events.8 = {
	type = country_event
	title = "OK"
	desc = "OK"
	picture = event_gondor
	hidden = yes

	trigger = {
		is_ai = no
		any_country_culture = {
			has_country_culture_modifier = encourage_migration_to_overlord
		}
	}

	immediate = {
		set_local_variable = {
			name = trying_to_move_num
			value = 0
		}
		every_country_culture = {
			limit = { has_country_culture_modifier = encourage_migration_to_overlord }
			save_temporary_scope_as = tmpCulture
			ROOT = {
				every_subject = {
					limit = {
						is_ai = yes
					}
					every_country_culture = {
						limit = {
							is_integrated = no
							this.culture = scope:tmpCulture.culture
						}
						add_country_culture_modifier = {
							name = encourage_migration_to_overlord
							duration = 360
						}
					}
				}
			}
		}
		every_subject = {
			every_owned_province = {
				set_local_variable = {
					name = all
					value = 0
				}
				set_local_variable = {
					name = mover
					value = 0
				}
				every_pops_in_province = {
					change_local_variable = {
						name = all
						add = 1
					}
					if = {
						limit = {
							country_culture = {
								has_country_culture_modifier = encourage_migration_to_overlord
							} 
						}
						change_local_variable = {
							name = mover
							add = 1
						}
					}
				}
				if = {
					limit = { local_var:all > 0 }
					set_local_variable = {
						name = moverPerc
						value = local_var:mover
					}
					change_local_variable = {
						name = moverPerc
						divide = local_var:all
					}
					if = {
						limit = { local_var:moverPerc < 0.9 } #leave enclaves intact
						every_pops_in_province = {
							limit = {
								country_culture = {
									has_country_culture_modifier = encourage_migration_to_overlord
								} 
							}
							add_to_list = trying_to_move_list
						}
						change_local_variable = {
							name = trying_to_move_num
							add = local_var:mover
						}
					}
				}
			}
		}


		set_variable = {
			name = actualMover
			# value = { integer_range = { min = 100 max = 100 } }
			value = { integer_range = { min = 0 max = 20 } }
		}
		change_variable = {
			name = actualMover
			multiply = local_var:trying_to_move_num
		}
		change_variable = {
			name = actualMover
			divide = 100
		}
	}
	option = {
		name = "OK"
		while = {
			count = var:actualMover
			limit = { treasury >= 100 }
			random_in_list = {
				list = trying_to_move_list
				remove_from_list = trying_to_move_list
				save_scope_as = pop_from_list
				ROOT = {
					random_owned_province = {
		        limit = { 
		        	total_population < population_cap 
		        	dominant_province_culture = scope:pop_from_list.culture
		        }
						weight = {
							province_has_space_for_migration_modifer = yes
						}
						save_scope_as = popTarget
					}
				}
				if = {
					limit = { exists = scope:popTarget }
					country = { #previous pop country
						add_treasury = 5
					}
					move_pop = scope:popTarget
					ROOT = {
						add_treasury = -10
					}
				}
			}
		}
	}
}


# Enable migration to vassals for all foreign cultures regularly
lotr_migration_events.18 = {
	type = country_event
	hidden = yes
	trigger = {
		has_variable = lotr_move_all_foreign_pops
	}
	immediate = {
		every_country_culture = {
			limit = {
				is_integrated = no
				NOT = { culture.culture_group = ROOT.culture.culture_group }
				NOT = { has_country_culture_modifier = encourage_migration }
			}
			add_country_culture_modifier = {
				name = encourage_migration
				duration = -1
			}
		}
	}
	option = {
		name = "OK"
	}
}

# Orcs removal directly after owner change (not occupied, really owner)
lotr_migration_events.100 = {
	type = province_event
	hidden = yes
	trigger = {
		exists = owner
		NOT = {
			OWNER = {
				country_culture_group = orcs_group
			}
		}
		province_has_orcs = yes
	}
	immediate = {
		orc_purge_effect = { LOC = ROOT }
	}
	option = {
		name = "OK"
	}
}

#count average free space
lotr_migration_events.1000 = {
	type = country_event
	hidden = yes
	immediate = {
		set_local_variable = {
			name = freeSpace
			value = 0
		}
		set_local_variable = {
			name = total_provinces
			value = 0
		}
		every_owned_province = {
			change_local_variable = {
				name = total_provinces
				add = 1
			}
			change_local_variable = {
				name = freeSpace
				add = population_cap
				subtract = total_population

			}
		}
		change_local_variable = {
			name = freeSpace
			divide = local_var:total_provinces
		}
		set_variable = {
			name = relative_free_space
			value = local_var:freeSpace
		}
	}
}
